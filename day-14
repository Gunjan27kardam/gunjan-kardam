///Reverse Words in a String
#include<bits/stdc++.h>
using namespace std;
int main()
{
    string s="TUF is great for interview preparation";
    cout<<"Before reversing words: "<<endl;
    cout<<s<<endl;
    s+=" ";
    stack<string> st;
    int i;
    string str="";
    for(i=0;i<s.length();i++)
    {
        if(s[i]==' ')
        {
            st.push(str);
            str="";
        }
        else str+=s[i];
    }
    string ans="";
    while(st.size()!=1)
    {
        ans+=st.top()+" ";
        st.pop();
    }
    ans+=st.top();// The last word should'nt have a space after it
    cout<<"After reversing words: "<<endl;
    cout<<ans;
    return 0;
}



//// Longest Palindromic Substring

string solve(string s,int left,int right)
{
    int n=s.length();
    while(left>=0 and right<n)
    {
        if(s[left]!=s[right])
        {
            break;
        }
        left--;
        right++;
    }
    return s.substr(left+1,right-left-1);
}
string longestPalinSubstring(string str)
{
    string longest;
    int n=str.size();
    for(int i=0;i<n;i++)
    {
        string odd=solve(str,i,i);
        if(odd.size()>longest.size())
        {
            longest=odd;
        }
    }
    for(int i=0;i<n;i++)
    {
        string even=solve(str,i,i+1);
        if(even.size()>longest.size())
        {
            longest=even;
        }
    }
    return longest;
}

/// Roman Numeral To Integer

#include<bits/stdc++.h>
int romanToInt(string s) {
    vector<int>v;
    v.push_back(0);
    for(int i=0;i<s.length();i++)
    {
        if(s[i]=='I')
            v.push_back(1);
        else if(s[i]=='V')
            v.push_back(5);
        else if(s[i]=='X')
            v.push_back(10);
        else if(s[i]=='L')
            v.push_back(50);
        else if(s[i]=='C')
            v.push_back(100);
        else if(s[i]=='D')
            v.push_back(500);
        else if(s[i]=='M')
            v.push_back(1000);
    }
    int ans=0;
    for(int i=v.size()-1;i>0;i--)
    {
        if(v[i]>v[i-1])
        {
            ans += v[i]-v[i-1];
            --i;
        }

        else
            ans += v[i];
    }
    return abs(ans);
}
